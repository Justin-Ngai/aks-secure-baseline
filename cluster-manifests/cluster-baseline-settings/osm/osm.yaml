apiVersion: v1
kind: ServiceAccount
metadata:
  name: cluster-osm
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: osm-config
  namespace: cluster-baseline-settings
data:
  permissive_traffic_policy_mode: "false"
  egress: "false"
  envoy_log_level: "info"
  enable_debug_server: "false"
  prometheus_scraping: "true"
  tracing_enable: "false"
  use_https_ingress: "true"
  service_cert_validity_duration: "24h"
  namespace: cluster-baseline-settings
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cluster-osm
rules:
  - apiGroups: ["apps"]
    resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
    verbs: ["list", "get", "watch"]
  - apiGroups: ["extensions"]
    resources: ["ingresses"]
    verbs: ["list", "get", "watch"]
  - apiGroups: ["batch"]
    resources: ["jobs"]
    verbs: ["list", "get", "watch"]
  - apiGroups: [""]
    resources: ["endpoints", "namespaces", "pods", "services", "secrets", "configmaps"]
    verbs: ["list", "get", "watch"]

  # Port forwarding is needed for the OSM pod to be able to connect
  # to participating Envoys and fetch their configuration.
  # This is used by the OSM debugging system.
  - apiGroups: [""]
    resources: ["pods", "pods/log", "pods/portforward"]
    verbs: ["get", "list", "create"]

  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "watch"]
  - apiGroups: [""]
    resources: ["secrets", "configmaps"]
    verbs: ["create", "update"]
  - apiGroups: ["admissionregistration.k8s.io"]
    resources: ["mutatingwebhookconfigurations"]
    verbs: ["get", "list", "watch", "create", "update", "patch"]
  - apiGroups: ["split.smi-spec.io"]
    resources: ["trafficsplits"]
    verbs: ["list", "get", "watch"]
  - apiGroups: ["access.smi-spec.io"]
    resources: ["traffictargets"]
    verbs: ["list", "get", "watch"]
  - apiGroups: ["specs.smi-spec.io"]
    resources: ["httproutegroups", "tcproutes"]
    verbs: ["list", "get", "watch"]

  # Used for interacting with cert-manager CertificateRequest resources.
  - apiGroups: ["cert-manager.io"]
    resources: ["certificaterequests"]
    verbs: ["list", "get", "watch", "create", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cluster-osm
subjects:
  - kind: ServiceAccount
    name: cluster-osm
    namespace: cluster-baseline-settings
roleRef:
  kind: ClusterRole
  name: cluster-osm
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: Service
metadata:
  name: osm-controller
  namespace: cluster-baseline-settings
  labels:
    app: osm-controller
spec:
  ports:
    - name: osm-port
      port: 15128
      targetPort: 15128
    - name: sidecar-injector
      port: 443
      targetPort: 9090
    - name: debug-port
      port: 9092
      targetPort: 9092
  selector:
    app: osm-controller
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: osm-controller
  labels:
    app: osm-controller
    meshName: osm
    
spec:
  replicas: 1
  selector:
    matchLabels:
      app: osm-controller
  template:
    metadata:
      labels:
        app: osm-controller
    spec:
      serviceAccountName: cluster-osm
      nodeSelector:
        kubernetes.io/arch: amd64
        kubernetes.io/os: linux
      tolerations:
      - effect: NoExecute
        key: pci-scope
        operator: Equal
        value: out-of-scope
      containers:
        - name: osm-controller
          image: mcr.microsoft.com/oss/openservicemesh/osm-controller:v0.6.1
          imagePullPolicy: IfNotPresent
          ports:
            - name: "admin-port"
              containerPort: 15000
            - name: "osm-port"
              containerPort: 15128
          command: ['/osm-controller']
          args: [
            "--verbosity", "info",
            "--osm-namespace", "cluster-baseline-settings",
            "--mesh-name", "osm",
            "--init-container-image", "mcr.microsoft.com/oss/openservicemesh/init:v0.6.1",
            "--sidecar-image", "$(ACR_INSTANCE).azurecr.io/live/envoyproxy/envoy-alpine:v1.15.0",
            "--webhook-config-name", "osm-webhook-osm",
            "--ca-bundle-secret-name", "osm-ca-bundle",
            "--certificate-manager", "tresor"
          ]
          resources:
            limits:
              cpu: 1500m
              memory: 256Mi
            requests:
              cpu: 500m
              memory: 32Mi
          readinessProbe:
            initialDelaySeconds: 1
            timeoutSeconds: 5
            httpGet:
              scheme: HTTP
              path: /health/ready
              port: 9091
          livenessProbe:
            initialDelaySeconds: 1
            timeoutSeconds: 5
            httpGet:
              scheme: HTTP
              path: /health/alive
              port: 9091
          env:
            - name: CONTROLLER_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: ACR_INSTANCE
              valueFrom:
                secretKeyRef:
                  name: osm-acr-instance
                  key: name
---
apiVersion: admissionregistration.k8s.io/v1beta1
kind: MutatingWebhookConfiguration
metadata:
  labels:
    app: osm-controller
  name: osm-webhook-osm
webhooks:
- name: osm-inject.k8s.io
  clientConfig:
    service:
      name: osm-controller
      namespace: cluster-baseline-settings
      path: /mutate-pod-creation
      port: 443
  failurePolicy: Fail
  matchPolicy: Exact
  namespaceSelector:
    matchLabels:
      openservicemesh.io/monitored-by: osm
    matchExpressions:
      # This label is explicitly set to ignore a namespace
      - key: "openservicemesh.io/ignore"
        operator: DoesNotExist
      - key: "name"
        operator: NotIn
        values:
        - cluster-baseline-settings
        - flux-system
        - falco-system
        - kube-system
        - kube-node-lease
        - kube-public
        - gatekeeper-system
  rules:
    - apiGroups:
        - ""
      apiVersions:
        - v1
      operations:
        - CREATE
      resources:
        - pods